import streamlit as st
import cv2
import mediapipe as mp
import numpy as np
import json
import av
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase, WebRtcMode
import joblib
from collections import deque
import os
import warnings 

# ==============================
# C·∫§U H√åNH
# ==============================
MODEL_PATH = "softmax_model_best1.pkl" # C·∫¢NH B√ÅO: PH·∫¢I ƒê∆Ø·ª¢C HU·∫§N LUY·ªÜN V·ªöI 10 ƒê·∫∂C TR∆ØNG
SCALER_PATH = "scale1.pkl"              # C·∫¢NH B√ÅO: PH·∫¢I CH·ª®A MEAN/STD CHO 10 ƒê·∫∂C TR∆ØNG
LABEL_MAP_PATH = "label_map_5cls.json"

SMOOTH_WINDOW = 2 # ƒê·∫∂T L√Ä 1 ƒê·ªÇ LO·∫†I B·ªé SMOOTHING V√Ä KI·ªÇM TRA PREDICTION T·ª®C TH·ªúI (FLICKERING)
EPS = 1e-8 
NEW_WIDTH, NEW_HEIGHT = 640, 480 
N_FEATURES = 10 # S·ªë l∆∞·ª£ng ƒë·∫∑c tr∆∞ng mong ƒë·ª£i

# ==============================
# H√ÄM D·ª∞ ƒêO√ÅN SOFTMAX
# ==============================
def softmax_predict(X, W, b):
    """Th·ª±c hi·ªán d·ª± ƒëo√°n Softmax."""
    # X ph·∫£i l√† (N, 10)
    logits = X @ W + b
    return np.argmax(logits, axis=1)

@st.cache_resource
def load_assets():
    """T·∫£i tham s·ªë W, b, scaler (mean, std) v√† label map"""
    try:
        # 1. T·∫£i m√¥ h√¨nh Softmax (W v√† b)
        with open(MODEL_PATH, "rb") as f:
            model_data = joblib.load(f)
            W = model_data["W"]
            b = model_data["b"]

        # 2. T·∫£i scaler (mean v√† std)
        with open(SCALER_PATH, "rb") as f:
            scaler_data = joblib.load(f)
            mean_data = scaler_data["X_mean"]
            std_data = scaler_data["X_std"]
            
        if W.shape[0] != N_FEATURES:
             st.error(f"L·ªñI KH√îNG T∆Ø∆†NG TH√çCH: M√¥ h√¨nh y√™u c·∫ßu {W.shape[0]} ƒë·∫∑c tr∆∞ng, nh∆∞ng ·ª©ng d·ª•ng n√†y tr√≠ch xu·∫•t {N_FEATURES} ƒë·∫∑c tr∆∞ng. Vui l√≤ng ki·ªÉm tra l·∫°i file model!")
             st.stop()

        # 3. T·∫£i label map
        with open(LABEL_MAP_PATH, "r") as f:
            label_map = json.load(f)
        id2label = {int(v): k for k, v in label_map.items()}

        return W, b, mean_data, std_data, id2label

    except FileNotFoundError as e:
        st.error(f"L·ªñI FILE: Kh√¥ng t√¨m th·∫•y file t√†i nguy√™n. Vui l√≤ng ki·ªÉm tra ƒë∆∞·ªùng d·∫´n: {e.filename}")
        st.stop()
    except Exception as e:
        st.error(f"L·ªñI LOAD D·ªÆ LI·ªÜU: Chi ti·∫øt: {e}")
        st.stop()

# T·∫£i t√†i s·∫£n (Ch·∫°y m·ªôt l·∫ßn)
W, b, mean, std, id2label = load_assets()
classes = list(id2label.values())

# ----------------------------------------------------------------------
## H√ÄM T√çNH ƒê·∫∂C TR∆ØNG
# ----------------------------------------------------------------------
mp_face_mesh = mp.solutions.face_mesh
EYE_LEFT_IDX = np.array([33, 159, 145, 133, 153, 144])
EYE_RIGHT_IDX = np.array([362, 386, 374, 263, 380, 385])
MOUTH_IDX = np.array([61, 291, 0, 17, 78, 308])

def eye_aspect_ratio(landmarks, left=True):
    idx = EYE_LEFT_IDX if left else EYE_RIGHT_IDX
    pts = landmarks[idx, :2]
    A = np.linalg.norm(pts[1] - pts[5])
    B = np.linalg.norm(pts[2] - pts[4])
    C = np.linalg.norm(pts[0] - pts[3])
    return (A + B) / (2.0 * (C + EPS))

def mouth_aspect_ratio(landmarks):
    pts = landmarks[MOUTH_IDX, :2]
    A = np.linalg.norm(pts[0] - pts[1])
    B = np.linalg.norm(pts[4] - pts[5])
    C = np.linalg.norm(pts[2] - pts[3])
    return (A + B) / (2.0 * (C + EPS))

def head_pose_yaw_pitch_roll(landmarks):
    left_eye = landmarks[33][:2]
    right_eye = landmarks[263][:2]
    nose = landmarks[1][:2]
    chin = landmarks[152][:2]

    dx = right_eye[0] - left_eye[0]
    dy = right_eye[1] - left_eye[1]
    roll = np.degrees(np.arctan2(dy, dx + EPS))

    interocular = np.linalg.norm(right_eye - left_eye) + EPS
    eyes_center = (left_eye + right_eye) / 2.0
    yaw = np.degrees(np.arctan2((nose[0] - eyes_center[0]), interocular))

    baseline = chin - eyes_center
    pitch = np.degrees(np.arctan2((nose[1] - eyes_center[1]), (np.linalg.norm(baseline) + EPS)))
    return yaw, pitch, roll

def get_extra_features(landmarks):
    nose, chin = landmarks[1], landmarks[152]
    angle_pitch_extra = np.degrees(np.arctan2(chin[1] - nose[1], (chin[2] - nose[2]) + EPS))
    forehead_y = np.mean(landmarks[[10, 338, 297, 332, 284], 1])
    cheek_dist = np.linalg.norm(landmarks[50] - landmarks[280])
    return angle_pitch_extra, forehead_y, cheek_dist


# ----------------------------------------------------------------------
## WEBRTC VIDEO PROCESSOR (Logic x·ª≠ l√Ω Real-time)
# ----------------------------------------------------------------------
class DrowsinessProcessor(VideoProcessorBase):
    def __init__(self):
        self.W = W
        self.b = b
        self.mean = mean
        self.std = std
        self.id2label = id2label
        self.face_mesh = mp_face_mesh.FaceMesh(
            max_num_faces=1,
            refine_landmarks=False,
            min_detection_confidence=0.5,
            min_tracking_confidence=0.5)
        
        self.pred_queue = deque(maxlen=SMOOTH_WINDOW)
        self.last_pred_label = "CHO DU LIEU VAO"
        self.N_FEATURES = N_FEATURES
        self.last_ear_avg = 0.4 # L·ªãch s·ª≠ EAR cho Delta EAR

    def recv(self, frame: av.VideoFrame) -> av.VideoFrame:
        frame_array = frame.to_ndarray(format="bgr24")

        # 1. RESIZE FRAME
        frame_resized = cv2.resize(frame_array, (NEW_WIDTH, NEW_HEIGHT))
        h, w = frame_resized.shape[:2]

        rgb = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2RGB)
        # L·∫≠t ·∫£nh ch·ªâ cho x·ª≠ l√Ω MediaPipe
        rgb_flipped = cv2.flip(rgb, 1) 
        
        results = self.face_mesh.process(rgb_flipped)
        
        delta_ear_value = 0.0

        # --- 2. TR√çCH XU·∫§T 10 ƒê·∫∂C TR∆ØNG ---
        if results.multi_face_landmarks:
            landmarks = np.array([[p.x * w, p.y * h, p.z * w] for p in results.multi_face_landmarks[0].landmark])

            # 6 ƒë·∫∑c tr∆∞ng ch√≠nh
            ear_l = eye_aspect_ratio(landmarks, True)
            ear_r = eye_aspect_ratio(landmarks, False)
            mar = mouth_aspect_ratio(landmarks)
            yaw, pitch, roll = head_pose_yaw_pitch_roll(landmarks)

            # 3 ƒë·∫∑c tr∆∞ng tƒ©nh ph·ª• tr·ª£
            angle_pitch_extra, forehead_y, cheek_dist = get_extra_features(landmarks)

            # 1 ƒë·∫∑c tr∆∞ng ƒë·ªông (Delta EAR)
            ear_avg = (ear_l + ear_r) / 2.0
            delta_ear_value = ear_avg - self.last_ear_avg 
            self.last_ear_avg = ear_avg # C·∫≠p nh·∫≠t l·ªãch s·ª≠

            # M·∫£ng 10 ƒë·∫∑c tr∆∞ng: [EAR_L, EAR_R, MAR, YAW, PITCH, ROLL, ANGLE_PITCH_EXTRA, DELTA_EAR, FOREHEAD_Y, CHEEK_DIST]
            feats = np.array([ear_l, ear_r, mar, yaw, pitch, roll,
                              angle_pitch_extra, delta_ear_value, forehead_y, cheek_dist], dtype=np.float32)

            # --- 3. CHU·∫®N H√ìA V√Ä D·ª∞ ƒêO√ÅN ---
            
            # Chu·∫©n h√≥a 10 ƒë·∫∑c tr∆∞ng
            feats_scaled = (feats - self.mean[:self.N_FEATURES]) / (self.std[:self.N_FEATURES] + EPS)
            
            # D·ª± ƒëo√°n Softmax
            pred_idx = softmax_predict(np.expand_dims(feats_scaled, axis=0), self.W, self.b)[0]
            pred_label = self.id2label.get(pred_idx, "UNKNOWN")
            
            # Add to smoothing queue
            self.pred_queue.append(pred_label)
        
        else:
             # N·∫øu m·∫•t m·∫∑t, reset l·ªãch s·ª≠ EAR
             self.last_ear_avg = 0.4 

        # --- 4. SMOOTHING V√Ä HI·ªÇN TH·ªä K·∫æT QU·∫¢ ---
        if len(self.pred_queue) > 0:
            self.last_pred_label = max(set(self.pred_queue), key=self.pred_queue.count)
        
        
        cv2.putText(frame_resized, f"Trang thai: {self.last_pred_label.upper()}", (10, 70),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 255, 0), 3)
        cv2.putText(frame_resized, f"Delta EAR: {delta_ear_value:.3f}", (10, 110),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 255), 2)

        # LO·∫†I B·ªé THAO T√ÅC L·∫¨T L·∫¶N 2 T·∫†I ƒê√ÇY ƒê·ªÇ HI·ªÇN TH·ªä ƒê√öNG
        frame_display = frame_resized 
        return av.VideoFrame.from_ndarray(frame_display, format="bgr24")

# ----------------------------------------------------------------------
## GIAO DI·ªÜN STREAMLIT CH√çNH
# ----------------------------------------------------------------------
st.set_page_config(page_title="Demo Softmax - 10 Features (Static + Delta EAR)", layout="wide")
st.title("üß† Nh·∫≠n di·ªán tr·∫°ng th√°i m·∫•t t·∫≠p trung (10 ƒê·∫∑c tr∆∞ng - Static + Delta EAR)")
st.warning("C·∫¢NH B√ÅO: M√¥ h√¨nh ph·∫£i ƒë∆∞·ª£c hu·∫•n luy·ªán l·∫°i v·ªõi 10 ƒë·∫∑c tr∆∞ng (bao g·ªìm Delta EAR) ƒë·ªÉ ho·∫°t ƒë·ªông ch√≠nh x√°c!")
st.warning("Vui l√≤ng ch·∫•p nh·∫≠n y√™u c·∫ßu truy c·∫≠p camera t·ª´ tr√¨nh duy·ªát c·ªßa b·∫°n.")
st.markdown("---")

col1, col2, col3 = st.columns([1, 4, 1]) 

with col2: 
    webrtc_streamer(
        key="softmax_driver_live",
        mode=WebRtcMode.SENDRECV,
        rtc_configuration={"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]},
        video_processor_factory=DrowsinessProcessor,
        media_stream_constraints={"video": True, "audio": False},
        async_processing=True,
    )


